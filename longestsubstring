Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring




solution:
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j <= n; j++)
                if (allUnique(s, i, j)) ans = Math.max(ans, j - i);
        return ans;
    }

    public boolean allUnique(String s, int start, int end) {
        Set<Character> set = new HashSet<>();
        for (int i = start; i < end; i++) {
            Character ch = s.charAt(i);
            if (set.contains(ch)) return false;
            set.add(ch);
        }
        return true;
    }
}


//own solution
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s=="")
        {return 0;}
        else{
        int strlength=s.length();
        char chstr[]=new char[strlength];
        int template=0;
        //将字符串转化为字符数组
        for(int i=0;i<strlength;i++)
        {
            chstr[i]=s.charAt(i);
        }
        int i=0,j=1,maxlength=1;
        if(strlength==1)
        {
            return 1;
        }
        else{
       while(j<strlength)
       {
    	  //先得出一个个子串然后算出其长度
    	        boolean flag=false;
    	           //此循环是为了判别知道J的位置有没有和i-J的位置字符相同的字符
    	    	for(int q=i;q<j;q++)
    	    	{
    	    		if(chstr[j]!=chstr[q])
    	    			flag=false;
    	    		else {
						flag=true;
						break;
					}
    	    	}
    	    	if(!flag)
    	    	{
    	    		j=j+1;
    	    	}
    	    	else {
    	 
    	        template=j-i;
    	        i=j;
    	        j=i+1;
    	    	if(template>maxlength)
    	    	{
    	    		maxlength=template;
    	    	}
    	    	}
    	
    	    
       }
       
       return maxlength;
        }
        
    }
    }
}
