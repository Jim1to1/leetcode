You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8



solution:
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode p = l1, q = l2, curr = dummyHead;
    int carry = 0;
    while (p != null || q != null) {
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }
    if (carry > 0) {
        curr.next = new ListNode(carry);
    }
    return dummyHead.next;
}


//自己解决方案：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result=new ListNode(0);
		ListNode cur=result;
		int carry=0,sum=0;
		while(l1!=null||l2!=null)
		{
			int p=(l1!=null)?l1.val:0;
			int q=(l2!=null)?l2.val:0;
			sum=p+q+carry;
			carry=sum/10;
			cur.next=new ListNode(sum%10);
			cur=cur.next;	
		if(l1!=null)	 l1=l1.next;
		if(l2!=null)	 l2=l2.next;
            //在使用链表时，需要明白节点和具体的引用的关系。
            //审题是关键
		}
		if(carry!=0)
		{
			cur.next=new ListNode(carry);
		}
		return result.next;
    }
}
